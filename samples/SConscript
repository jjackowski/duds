# This file is part of the DUDS project. It is subject to the BSD-style
# license terms in the LICENSE file found in the top-level directory of this
# distribution and at https://github.com/jjackowski/duds/blob/master/LICENSE.
# No part of DUDS, including this file, may be copied, modified, propagated,
# or distributed except according to the terms contained in the LICENSE file.

Import('*')

envsamp = env.Clone()
envsamp.AppendUnique(
	LIBS = 'libboost_program_options${BOOSTTOOLSET}${BOOSTTAG}${BOOSTABI}${BOOSTVER}'
)

envser = envsamp.Clone()
envser.AppendUnique(
	LIBS = 'libboost_serialization${BOOSTTOOLSET}${BOOSTTAG}${BOOSTABI}${BOOSTVER}'
)

envthread = envsamp.Clone()
envthread.AppendUnique(
	LIBS = 'pthread'
)

if not env['Use_GpioDevPort']:
	envser.Append(CPPDEFINES = 'USE_SYSFS_PORT')
	envthread.Append(CPPDEFINES = 'USE_SYSFS_PORT')

# could loop through directories, but be lazy for now
targets = [
	#env.Program('ds1620', Glob('DS1620/*.cpp') + libs),  # broken
	envthread.Program('time', ['time.cpp'] + libs),
	envthread.Program('addressLCD', ['addressLCD.cpp'] + libs),
	envthread.Program('clockLCD', ['clockLCD.cpp'] + libs),
	envser.Program('units', ['units.cpp'] + libs),
	envthread.Program('apds9301', ['apds9301test.cpp'] + libs),
	envthread.Program('am2320', ['am2320test.cpp'] + libs),         # 5
	envthread.Program('amg88xx', ['amg88xxtest.cpp'] + libs),
	envthread.Program('ina219', ['ina219test.cpp'] + libs),
	envthread.Program('ina219LCD', ['ina219LCD.cpp'] + libs),
	envthread.Program('isl29125', ['isl29125test.cpp'] + libs),
	envthread.Program('tsl2591', ['tsl2591test.cpp'] + libs),       # 10
	envthread.Program('textdisplay', ['textdisplay.cpp'] + libs),
	envthread.Program('pwmbacklight', ['pwmbacklight.cpp'] + libs),
	envthread.Program('st7920', ['st7920.cpp'] + libs),
	envthread.Program('pinconfig', ['pinconfig.cpp'] + libs),
	envsamp.Program('rendertext', ['rendertext.cpp'] + libs),       # 15
]
# needs a font
# st7920
envsamp.Depends(targets[13], File('../../images/font_8x16.bppia').abspath)
# rendertext
envsamp.Depends(targets[15], File('../../images/font_8x16.bppia').abspath)

# These are be needed if image archive files, instead of header files, are
# generated. SCons seems to be catching the dependency from the includes.
# addressLCD
envsamp.Depends(targets[1], File('../../images/neticons.bppia').abspath)
# clockLCD
envsamp.Depends(targets[2], File('../../images/numberparts.bppia').abspath)
# ina219LCD
envsamp.Depends(targets[8], File('../../images/numberparts.bppia').abspath)
# st7920
envsamp.Depends(targets[13], File('../../images/neticons.bppia').abspath)

if envthread['Use_Eigen']:
	enveigen = envthread.Clone()
	enveigen.AppendUnique(CPPPATH = '$EIGENINC')
	targets.append(enveigen.Program('orientation', ['orientation.cpp'] + libs))
	#targets.append(enveigen.Program('orientation-LSM9DS1', ['orientation-LSM9DS1.cpp'] + libs))
	#targets.append(enveigen.Program('orientation-LCD', ['orientation-LCD.cpp'] + libs))

if envsamp['Use_Evdev']:
	targets.append(envsamp.Program('evdevin', ['evdevin.cpp'] + libs))
	trg = envthread.Program('bppmenu', ['bppmenu.cpp'] + libs)
	envthread.Depends(trg, File('../../images/font_Vx7.bppia').abspath)
	envthread.Depends(trg, File('../../images/font_Vx8B.bppia').abspath)
	envthread.Depends(trg, File('../../images/menuicons.bppia').abspath)
	targets.append(trg)

Return('targets')
